
local fil = io.open("lgl.cpp", "w")

fil:write(
[[
/*********************************
  This file is automatically generated by LGL
  
  http://github.com/zorbathut/lgl
  
  You probably shouldn't edit it manually.
*********************************/

#include "GLee.h"
#include "lua.h"
#include "lauxlib.h"

#include <stdarg.h>

void std_error(lua_State *L, const char *helpdocs, const char *msg, ...) __attribute__((format(printf,3,4)));
void std_error(lua_State *L, const char *helpdocs, const char *msg, ...) {
  char buf[2048];
  strcpy(buf, helpdocs);
  int len = strlen(buf);
  va_list args;
  va_start(args, msg);
  vsnprintf(buf + len, sizeof(buf) - len, msg, args);
  va_end(args);
  buf[sizeof(buf) - 1] = '\0'; // who bloody well knows
  luaL_error(L, buf);
}

]])

local data
do
  local descriptor_table = {}
  
  descriptor_table.enum = "enum"
  descriptor_table.int = "int"
  descriptor_table.float = "float"
  descriptor_table.table_data = "table_data"
  
  local lf = assert(loadfile("descriptor_ogl1.lua"))
  setfenv(lf, descriptor_table)
  lf()
  data = descriptor_table.data
end

local ites = {}
for k, v in pairs(data) do
  table.insert(ites, k)
end
table.sort(ites)

for _, v in pairs(ites) do
  local dat = data[v]
  
  fil:write("static const char help_" .. v .. "[] = \"(gotta write help)\";\n")
  fil:write("static int lgl_" .. v .. "(lua_State *L) {\n")
  
  -- first we do parameter checking. count first
  fil:write("  if(lua_gettop(L) != " .. #dat.params .. ") {\n")
  fil:write("    std_error(L, help_" .. v .. ", \"Incorrect number of parameters! Expected " .. #dat.params .. ", got %d\", lua_gettop(L));\n")
  fil:write("  }\n")
  
  fil:write("}\n\n")
end


fil:write("\n\nstatic const luaL_reg lgl[] = {\n")
for _, v in pairs(ites) do
  fil:write('  {"' .. v .. '", lgl_' .. v .. '},\n')
end
fil:write("  {NULL, NULL}\n")
fil:write("};\n\n")

fil:write(
[[int luaopen_lgl(lua_State *L) {
  luaL_openlib(L, "gl", lgl, 0);
  return 1;
}
]])

fil:close()
